#include stdtypes.clank
#include XNAMacros.clank
main
{
	#include _GameStaticDataView.clank
	#include _EntityBaseView.clank
	#include _StateAlterationParametersView.clank
	#include _StateAlterationView.clank
	#include _StateAlterationModelView.clank
	#include _PassiveEquipmentUpgradeModelView.clank
	#include _PassiveEquipmentModelView.clank
	#include _WeaponUpgradeModelView.clank
	#include _WeaponEnchantModelView.clank
	#include _WeaponModelView.clank
	#include _MapView.clank
	#include _CircleShapeView.clank
	#include _GenericShapeView.clank
	#include _SpellcastBaseView.clank
	#include _SpellView.clank
	#include _SpellModelView.clank
	#include _SpellCastTargetInfoView.clank
	#include _SpellLevelDescriptionView.clank
	#include _SpellTargetInfoView.clank
	#include _VisionMapView.clank
	state
	{
		// Rajoute les statements using et le bon namespace pour la classe state.
		void getClassMetadata_cs()
		{
			string usingStatements = "";
			string namespace = "Codinsa2015.Views";
		}
		// Rajoute le nom du package pour les projets java.
		void getClassMetadata_java()
		{
			string package = "net.codinsa2015";
		}
		public enum PickAction
		{
			Wait = 0,
			PickActive = 1,
			PickPassive = 2
		}

		public enum PickResult
		{
			Success = 0,
			NotYourTurn = 1,
			SpellNotAvailable = 2,
			InvalidOperation = 3
		}

		public enum EntityUniquePassives
		{
			None = 0,
			Hunter = 1,
			Rugged = 2,
			Unshakable = 4,
			Strategist = 16,
			Soldier = 32,
			Altruistic = 64,
			All = 65535
		}

		public enum EntityHeroRole
		{
			Fighter = 0,
			Mage = 1,
			Tank = 2,
			Max = 2
		}

		public enum EntityType
		{
			Team1 = 2,
			Team2 = 4,
			Teams = 6,
			Structure = 8,
			Tower = 24,
			Team1Tower = 26,
			Team2Tower = 28,
			Spawner = 72,
			Team1Spawner = 74,
			Team2Spawner = 76,
			Idol = 136,
			Team1Idol = 138,
			Team2Idol = 140,
			Monster = 256,
			Creep = 512,
			Team1Creep = 514,
			Team2Creep = 516,
			Boss = 1280,
			Miniboss = 2304,
			AllTargettableNeutral = 3328,
			AllObjectives = 3544,
			Checkpoint = 16384,
			Team1Checkpoint = 16386,
			Team2Checkpoint = 16388,
			Player = 32768,
			Team1Player = 32770,
			Team2Player = 32772,
			AllTeam1 = 33498,
			AllTeam2 = 33500,
			WardPlacement = 65536,
			Ward = 131072,
			Shop = 262144,
			Team1Shop = 262146,
			Team2Shop = 262148,
			HeroSpawner = 524288,
			Team1HeroSpawner = 524290,
			Team2HeroSpawner = 524292,
			AllSaved = 871896,
			All = 16777215
		}

		public enum EntityTypeRelative
		{
			Me = 1,
			Ally = 2,
			Ennemy = 4,
			Structure = 8,
			Tower = 24,
			AllyTower = 26,
			EnnemyTower = 28,
			Spawner = 72,
			AllySpawner = 74,
			EnnemySpawner = 76,
			Idol = 136,
			AllyIdol = 138,
			EnnemyIdol = 140,
			Monster = 256,
			Creep = 512,
			AllyCreep = 514,
			EnnemyCreep = 516,
			Boss = 1280,
			Miniboss = 2304,
			AllObjectives = 3544,
			AllTargettableNeutral = 3840,
			Checkpoint = 16384,
			AllyCheckpoint = 16386,
			EnnemyCheckpoint = 16388,
			Player = 32768,
			AllyPlayer = 32770,
			EnnemyPlayer = 32772,
			AllAlly = 33498,
			AllEnnemy = 33500,
			WardPlacement = 65536,
			Ward = 131072,
			Shop = 262144,
			HeroSpawner = 524288,
			AllyHeroSpawner = 524290,
			EnnemyHeroSpawner = 524292,
			AllSaved = 609752,
			All = 16777215
		}

		public enum StateAlterationSource
		{
			Consumable = 0,
			Armor = 1,
			Weapon = 2,
			Amulet = 3,
			Boots = 4,
			SpellActive = 5,
			UniquePassive = 6
		}

		public enum StateAlterationType
		{
			None = 0,
			Root = 1,
			Silence = 2,
			Interruption = 4,
			CDR = 8,
			MoveSpeed = 16,
			ArmorBuff = 32,
			Regen = 64,
			AttackDamageBuff = 128,
			MaxHP = 256,
			MagicDamageBuff = 512,
			MagicResistBuff = 1024,
			AttackSpeed = 2048,
			Dash = 4096,
			AttackDamage = 8192,
			MagicDamage = 16384,
			TrueDamage = 32768,
			AllDamage = 57344,
			Heal = 65536,
			Stealth = 131072,
			Shield = 524288,
			Sight = 1048576,
			WardSight = 1048576,
			TrueSight = 2097152,
			Blind = 4194304,
			Stun = 4194311,
			AllCC = 4194311,
			DamageImmune = 16777216,
			ControlImmune = 33554432,
			Cleanse = 67108864,
			All = 268435455
		}

		public enum DashDirectionType
		{
			TowardsEntity = 0,
			Direction = 1,
			TowardsSpellPosition = 2,
			BackwardsCaster = 3
		}

		public enum ConsummableType
		{
			Empty = 0,
			Ward = 1,
			Unward = 2
		}

		public enum ConsummableUseResult
		{
			Success = 0,
			SuccessAndDestroyed = 1,
			Fail = 2,
			NotUnits = 3
		}

		public enum EquipmentType
		{
			Consummable = 0,
			Armor = 1,
			Weapon = 2,
			WeaponEnchant = 3,
			Boots = 4
		}

		public enum ShopTransactionResult
		{
			ItemDoesNotExist = 0,
			ItemIsNotAConsummable = 1,
			NoItemToSell = 2,
			NotEnoughMoney = 3,
			NotInShopRange = 4,
			UnavailableItem = 5,
			ProvidedSlotDoesNotExist = 6,
			NoSlotAvailableOnHero = 7,
			EnchantForNoWeapon = 8,
			StackOverflow = 9,
			Success = 10,
			AlreadyMaxLevel = 11
		}

		public enum GenericShapeType
		{
			Circle = 0,
			Rectangle = 1
		}

		public enum SpellUseResult
		{
			Success = 0,
			InvalidTarget = 1,
			InvalidTargettingType = 2,
			OnCooldown = 3,
			Silenced = 4,
			Blind = 5,
			OutOfRange = 6
		}

		public enum TargettingType
		{
			Targetted = 1,
			Position = 2,
			Direction = 4
		}

		public enum VisionFlags
		{
			None = 0,
			Team1Vision = 1,
			Team2Vision = 2,
			Team1TrueVision = 5,
			Team2TrueVision = 10,
			Team1WardSight = 17,
			Team2WardSight = 18
		}

		public enum SceneMode
		{
			Lobby = 0,
			Pick = 1,
			Game = 2,
			End = 3
		}

	}
	macro
	{
		// Achète et équipe un objet d'id donné au shop. Les ids peuvent être obtenus via ShopGetWeapons(),ShopGetArmors(), ShopGetBoots() etc...
		ShopTransactionResult ShopPurchaseItem_macro(int clientId,int equipId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopPurchaseItem($(equipId))"; }
		// Achète un consommable d'id donné, et le place dans le slot donné.
		ShopTransactionResult ShopPurchaseConsummable_macro(int clientId,int consummableId,int slot) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopPurchaseConsummable($(consummableId),$(slot))"; }
		// Vend l'équipement du type passé en paramètre. (vends l'arme si Weapon, l'armure si Armor etc...)
		ShopTransactionResult ShopSell_macro(int clientId,EquipmentType equipType) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopSell($(equipType))"; }
		// Vends un consommable situé dans le slot donné.
		ShopTransactionResult ShopSellConsummable_macro(int clientId,int slot) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopSellConsummable($(slot))"; }
		// Effectue une upgrade d'un équipement indiqué en paramètre.
		ShopTransactionResult ShopUpgrade_macro(int clientId,EquipmentType equipType) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopUpgrade($(equipType))"; }
		// Obtient la liste des modèles d'armes disponibles au shop.
		List<WeaponModelView> ShopGetWeapons_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopGetWeapons()"; }
		// Obtient la liste des id des modèles d'armures disponibles au shop.
		List<int> ShopGetArmors_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopGetArmors()"; }
		// Obtient la liste des id des modèles de bottes disponibles au shop.
		List<int> ShopGetBoots_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopGetBoots()"; }
		// Obtient la liste des id des enchantements disponibles au shop.
		List<int> ShopGetEnchants_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).ShopGetEnchants()"; }
		// Obtient l'id du modèle d'arme équipé par le héros. (-1 si aucun)
		int GetMyWeaponId_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyWeaponId()"; }
		// Obtient le niveau du modèle d'arme équipé par le héros. (-1 si aucune arme équipée)
		int GetMyWeaponLevel_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyWeaponLevel()"; }
		// Obtient l'id du modèle d'armure équipé par le héros. (-1 si aucun)
		int GetMyArmorId_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyArmorId()"; }
		// Obtient le niveau du modèle d'armure équipé par le héros. (-1 si aucune armure équipée)
		int GetMyArmorLevel_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyArmorLevel()"; }
		// Obtient l'id du modèle de bottes équipé par le héros. (-1 si aucun)
		int GetMyBootsId_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyBootsId()"; }
		// Obtient le niveau du modèle de bottes équipé par le héros. (-1 si aucune paire équipée)
		int GetMyBootsLevel_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyBootsLevel()"; }
		// Obtient l'id du modèle d'enchantement d'arme équipé par le héros. (-1 si aucun)
		int GetMyWeaponEnchantId_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyWeaponEnchantId()"; }
		// Retourne une vue vers le héros contrôlé par ce contrôleur.
		EntityBaseView GetMyHero_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyHero()"; }
		// Retourne la position du héros.
		Vector2 GetMyPosition_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMyPosition()"; }
		// Déplace le joueur vers la position donnée en utilisant l'A*.
		bool StartMoveTo_macro(int clientId,Vector2 position) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).StartMoveTo($(position))"; }
		// Indique si le joueur est entrain de se déplacer en utilisant son A*.
		bool IsAutoMoving_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).IsAutoMoving()"; }
		// Arrête le déplacement automatique (A*) du joueur.
		bool EndMoveTo_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).EndMoveTo()"; }
		// Retourne la liste des entités en vue
		List<EntityBaseView> GetEntitiesInSight_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetEntitiesInSight()"; }
		// Obtient une vue sur l'entité dont l'id est passé en paramètre. (si l'id retourné est -1 : accès refusé)
		EntityBaseView GetEntityById_macro(int clientId,int entityId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetEntityById($(entityId))"; }
		// Obtient les id des spells possédés par le héros.
		List<int> GetMySpells_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMySpells()"; }
		// Utilise le sort d'id donné. Retourne true si l'action a été effectuée.
		bool UseMySpell_macro(int clientId,int spellId,SpellCastTargetInfoView target) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).UseMySpell($(spellId),$(target))"; }
		// Obtient une vue sur le spell du héros contrôlé dont l'id est passé en paramètre.
		SpellView GetMySpell_macro(int clientId,int spellId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMySpell($(spellId))"; }
		// Obtient le mode actuel de la scène.
		SceneMode GetMode_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetMode()"; }
		// Obtient la description du spell dont l'id est donné en paramètre.
		SpellLevelDescriptionView GetSpellCurrentLevelDescription_macro(int clientId,int spellId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetSpellCurrentLevelDescription($(spellId))"; }
		// Obtient toutes les données du jeu qui ne vont pas varier lors de son déroulement.
		GameStaticDataView GetStaticData_macro(int clientId) { string cs = "Codinsa2015.Server.GameServer.GetScene().GetControler(clientId).GetStaticData()"; }

	} // macro
	access
	{
		// Achète et équipe un objet d'id donné au shop. Les ids peuvent être obtenus via ShopGetWeapons(),ShopGetArmors(), ShopGetBoots() etc...
		public ShopTransactionResult ShopPurchaseItem(int equipId)
		{ 
			return ShopPurchaseItem_macro(clientId,equipId);
		}

		// Achète un consommable d'id donné, et le place dans le slot donné.
		public ShopTransactionResult ShopPurchaseConsummable(int consummableId,int slot)
		{ 
			return ShopPurchaseConsummable_macro(clientId,consummableId,slot);
		}

		// Vend l'équipement du type passé en paramètre. (vends l'arme si Weapon, l'armure si Armor etc...)
		public ShopTransactionResult ShopSell(EquipmentType equipType)
		{ 
			return ShopSell_macro(clientId,equipType);
		}

		// Vends un consommable situé dans le slot donné.
		public ShopTransactionResult ShopSellConsummable(int slot)
		{ 
			return ShopSellConsummable_macro(clientId,slot);
		}

		// Effectue une upgrade d'un équipement indiqué en paramètre.
		public ShopTransactionResult ShopUpgrade(EquipmentType equipType)
		{ 
			return ShopUpgrade_macro(clientId,equipType);
		}

		// Obtient la liste des modèles d'armes disponibles au shop.
		public List<WeaponModelView> ShopGetWeapons()
		{ 
			return ShopGetWeapons_macro(clientId);
		}

		// Obtient la liste des id des modèles d'armures disponibles au shop.
		public List<int> ShopGetArmors()
		{ 
			return ShopGetArmors_macro(clientId);
		}

		// Obtient la liste des id des modèles de bottes disponibles au shop.
		public List<int> ShopGetBoots()
		{ 
			return ShopGetBoots_macro(clientId);
		}

		// Obtient la liste des id des enchantements disponibles au shop.
		public List<int> ShopGetEnchants()
		{ 
			return ShopGetEnchants_macro(clientId);
		}

		// Obtient l'id du modèle d'arme équipé par le héros. (-1 si aucun)
		public int GetMyWeaponId()
		{ 
			return GetMyWeaponId_macro(clientId);
		}

		// Obtient le niveau du modèle d'arme équipé par le héros. (-1 si aucune arme équipée)
		public int GetMyWeaponLevel()
		{ 
			return GetMyWeaponLevel_macro(clientId);
		}

		// Obtient l'id du modèle d'armure équipé par le héros. (-1 si aucun)
		public int GetMyArmorId()
		{ 
			return GetMyArmorId_macro(clientId);
		}

		// Obtient le niveau du modèle d'armure équipé par le héros. (-1 si aucune armure équipée)
		public int GetMyArmorLevel()
		{ 
			return GetMyArmorLevel_macro(clientId);
		}

		// Obtient l'id du modèle de bottes équipé par le héros. (-1 si aucun)
		public int GetMyBootsId()
		{ 
			return GetMyBootsId_macro(clientId);
		}

		// Obtient le niveau du modèle de bottes équipé par le héros. (-1 si aucune paire équipée)
		public int GetMyBootsLevel()
		{ 
			return GetMyBootsLevel_macro(clientId);
		}

		// Obtient l'id du modèle d'enchantement d'arme équipé par le héros. (-1 si aucun)
		public int GetMyWeaponEnchantId()
		{ 
			return GetMyWeaponEnchantId_macro(clientId);
		}

		// Retourne une vue vers le héros contrôlé par ce contrôleur.
		public EntityBaseView GetMyHero()
		{ 
			return GetMyHero_macro(clientId);
		}

		// Retourne la position du héros.
		public Vector2 GetMyPosition()
		{ 
			return GetMyPosition_macro(clientId);
		}

		// Déplace le joueur vers la position donnée en utilisant l'A*.
		public bool StartMoveTo(Vector2 position)
		{ 
			return StartMoveTo_macro(clientId,position);
		}

		// Indique si le joueur est entrain de se déplacer en utilisant son A*.
		public bool IsAutoMoving()
		{ 
			return IsAutoMoving_macro(clientId);
		}

		// Arrête le déplacement automatique (A*) du joueur.
		public bool EndMoveTo()
		{ 
			return EndMoveTo_macro(clientId);
		}

		// Retourne la liste des entités en vue
		public List<EntityBaseView> GetEntitiesInSight()
		{ 
			return GetEntitiesInSight_macro(clientId);
		}

		// Obtient une vue sur l'entité dont l'id est passé en paramètre. (si l'id retourné est -1 : accès refusé)
		public EntityBaseView GetEntityById(int entityId)
		{ 
			return GetEntityById_macro(clientId,entityId);
		}

		// Obtient les id des spells possédés par le héros.
		public List<int> GetMySpells()
		{ 
			return GetMySpells_macro(clientId);
		}

		// Utilise le sort d'id donné. Retourne true si l'action a été effectuée.
		public bool UseMySpell(int spellId,SpellCastTargetInfoView target)
		{ 
			return UseMySpell_macro(clientId,spellId,target);
		}

		// Obtient une vue sur le spell du héros contrôlé dont l'id est passé en paramètre.
		public SpellView GetMySpell(int spellId)
		{ 
			return GetMySpell_macro(clientId,spellId);
		}

		// Obtient le mode actuel de la scène.
		public SceneMode GetMode()
		{ 
			return GetMode_macro(clientId);
		}

		// Obtient la description du spell dont l'id est donné en paramètre.
		public SpellLevelDescriptionView GetSpellCurrentLevelDescription(int spellId)
		{ 
			return GetSpellCurrentLevelDescription_macro(clientId,spellId);
		}

		// Obtient toutes les données du jeu qui ne vont pas varier lors de son déroulement.
		public GameStaticDataView GetStaticData()
		{ 
			return GetStaticData_macro(clientId);
		}


	} // access

} // main
